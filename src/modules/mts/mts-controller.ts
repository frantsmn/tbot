import MtsModel from './mts-model'
import Logger from '../../modules/logger/logger'

export default class MtsController {
    logger: Logger

    constructor(BOT, MTS_FIREBASE, ADMIN_ID) {
        this.logger = new Logger('mts-scheduler', BOT, ADMIN_ID);

        BOT.onText(/mts/gi, async msg => {
            let userAccounts = [];

            try {
                userAccounts = await MTS_FIREBASE.getMtsAccountsByUserId(msg.from.id);
            } catch (error) {
                BOT.sendMessage(msg.from.id, `üê∏ –£–ø—Å... –Ø —Å–ª–æ–º–∞–ª–∞—Å—å`);
                this.logger.log({
                    value: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n${error}`,
                    type: 'error',
                    isAlertAdmin: true,
                });
            }

            if (!userAccounts.length) {
                BOT.sendMessage(msg.from.id, `üê∏ –Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∫–∞–±–∏–Ω–µ—Ç–∞ MTS`);

                return;
            }

            userAccounts
                .map(account => MtsModel.createMessage(account))
                .forEach(message => {
                    BOT.sendMessage(msg.from.id, message.text, message.options);
                    if (msg.from.id !== ADMIN_ID) {
                        BOT.sendMessage(ADMIN_ID, message.text, message.options);
                    }
                });
        })

        BOT.on("callback_query", async response => {
            if (JSON.parse(response.data).query_id === "mts") {
                BOT.answerCallbackQuery(response.id, {
                    text: `–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥`,
                    cache_time: 120,
                    show_alert: true,
                });

                try {
                    const userAccounts = await MTS_FIREBASE.getMtsAccountsByUserId(response.message.chat.id)
                    await MtsModel.updateAccounts(userAccounts);
                    userAccounts
                        .map(account => MtsModel.createMessage(account))
                        .forEach(message => {
                            BOT.sendMessage(response.message.chat.id, message.text, message.options);
                            if (response.message.chat.id !== ADMIN_ID) {
                                BOT.sendMessage(ADMIN_ID, message.text, message.options);
                            }
                        });
                    MTS_FIREBASE.setMtsAccounts(userAccounts);
                } catch (error) {
                    this.logger.log({
                        value: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n${error}`,
                        type: 'error',
                        isAlertAdmin: true,
                    });
                }
            }
        })
    }
}
