import schedule from 'node-schedule'
import UserDeviceScan from './user-device-scan'
import Logger from '@modules/logger/logger'
import TuyaDevice from './tuya-device'

const logger = new Logger('iot-scheduler')

export default class IoTScheduler {
    constructor(USER_DEVICES, tyuaDevices: { clipLight: TuyaDevice, ambientLight: TuyaDevice }) {
        const nokiaSevenPlus = USER_DEVICES[0];
        const {clipLight, ambientLight} = tyuaDevices;

        // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –æ—Ç 18:00 –¥–æ 21:59
        schedule.scheduleJob('*/1 18-21 * * *', ambientLightOnByUserDevice);
        schedule.scheduleJob({hour: 8, minute: 45}, ambientLightOnByUserDevice);
        schedule.scheduleJob({hour: 1, minute: 0}, allLightsOff);

        // –í–∫–ª—é—á–µ–Ω–∏–µ AmbientLight –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω
        function ambientLightOnByUserDevice() {
            UserDeviceScan
                .scanDevice(nokiaSevenPlus)
                .then(isDeviceAvailable => {
                    if (!isDeviceAvailable || ambientLight.status) return;
                    ambientLight.turnOn().then(() =>
                        logger.log({
                            value: `‚åõ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ¬´${ambientLight.name}¬ª üü° –≤–∫–ª—é—á–µ–Ω–æ –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é`,
                            type: 'info'
                        })
                    );
                })
                .catch(error =>
                    logger.log({
                        value: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ lightOnByUserDevice. ${error}`,
                        type: 'error'
                    }));
        }

        // –í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è
        function allLightsOff() {
            clipLight.turnOff();
            ambientLight.turnOff();
            logger.log({
                value: `‚åõ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ¬´${ambientLight.name}¬ª ‚ö´ –∏ ¬´${clipLight.name}¬ª –≤—ã–∫–ª—é—á–µ–Ω—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é`,
                type: 'info'
            });
        }

    }
}
