import TuyAPI from 'tuyapi'
import Logger from '@modules/logger/logger'
const logger = new Logger('tuya-device')

// –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–ª–ª–±—ç–∫–∏
enum Events {
    "statusChange"
}

interface EventMap {
    statusChange: Function
}

export default class TuyaDevice {
    id: string
    key: string
    name: string
    #device: any
    #isConnected: boolean
    #status: boolean
    #eventMap: EventMap

    constructor({ id, key, name }) {
        this.id = id
        this.name = name
        this.#device = new TuyAPI({ id, key, version: 3.3 })
        this.#eventMap = {
            statusChange: () => { }
        }

        this.#device.on('connected', () => {
            logger.log({
                value: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ¬´${this.name}¬ª –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!`,
                type: 'info'
            });
            this.isConnected = true;
        });

        this.#device.on('disconnected', () => {
            logger.log({
                value: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ¬´${this.name}¬ª –æ—Ç–∫–ª—é—á–µ–Ω–æ!`,
                type: 'info'
            });
            this.isConnected = false;

            logger.log({
                value: `–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É ¬´${this.name}¬ª —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...`,
                type: 'warn'
            });

            setTimeout(() => this.connect(), 10000);
        });

        this.#device.on('data', data => {
            if (!data.dps) return
            this.status = data.dps['1'];
        });

        this.#device.on('error', error => {
            logger.log({
                value: `–û—à–∏–±–∫–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º ¬´${this.name}¬ª. ${error}`,
                type: 'error'
            });
        });

        this.connect();
    }

    async connect() {
        try {
            await this.#device.find();
            await this.#device.connect();
        } catch (error) {
            logger.log({
                value: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ¬´${this.name}¬ª. ${error}`,
                type: 'warn'
            });
        }
    }

    async toggle(): Promise<boolean | null> {
        if (!this.isConnected) return null;
        const data = await this.#device.set({ set: !this.status });
        if (data) this.status = data.dps['1'];
        return this.status;
    }

    on(eventName: Events, callback: Function) {
        this.#eventMap[eventName] = callback;
    }

    set status(newStatus) {
        if (this.#status === newStatus) return;

        this.#status = newStatus;
        this.#eventMap.statusChange(this.status);

        logger.log({
            value: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ¬´${this.name}¬ª ${this.status ? 'üü° –≤–∫–ª—é—á–µ–Ω–æ' : '‚ö´ –≤—ã–∫–ª—é—á–µ–Ω–æ'}`,
            type: 'info'
        });
    }

    get status() {
        return this.#status;
    }

    set isConnected(value) {
        this.#isConnected = value;
    }

    get isConnected() {
        return this.#isConnected;
    }
}
