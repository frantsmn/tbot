const schedule = require('node-schedule');
const logger = require('./logger');
const bot = require('./app').bot;

const Mts = require('./model/mts');
// const Beltelecom = require('./model/beltelecom');
const scan = require('./model/scan');

//
//#region BALANCE REMINDERS

async function balanceReminders() {
    logger.info(`โ [scheduler] balanceReminders() started`);
    Mts.getAllWarningMessagesFirestore()
        .then(messages => messages.forEach(m => bot.sendMessage(m.id, m.text, m.options)));
    // Beltelecom.getAllWarningMessagesFirestore()
    //     .then(messages => messages.forEach(m => bot.sendMessage(m.id, m.text, m.options)));
    logger.info(`โ [scheduler] balanceReminders() finished`);
}

schedule.scheduleJob({ hour: 13, minute: 05 }, balanceReminders);

//#endregion
//


//
//#region UPDATE ACCOUNTS

async function updateAccounts() {
    logger.info(`โ [scheduler] updateAccounts() started`);
    await Mts.updateAllAccounts();
    // await Beltelecom.updateAllAccounts();
    logger.info(`โ [scheduler] updateAccounts() finished`);
}

schedule.scheduleJob({ hour: 05, minute: 30 }, updateAccounts);
schedule.scheduleJob({ hour: 17, minute: 30 }, updateAccounts);

//#endregion
//


//
//#region UPDATE URGENT ACCOUNTS

async function updateUrgentAccounts() {
    // logger.info(`โ [scheduler] updateUrgentAccounts() started`);
    await Mts.updateUrgentAccounts();
    // await Beltelecom.updateUrgentAccounts();
    // logger.info(`โ [scheduler] updateUrgentAccounts() finished`);
}

schedule.scheduleJob('*/10 * * * *', updateUrgentAccounts);

//#endregion
//

//#region checkDevice 
const ambientLight = require("./model/tuya").ambientLight;
const clipLight = require("./model/tuya").clipLight;

schedule.scheduleJob('*/1 * * * *', scan.checkDevice);
scan.checkDevice().then(result => {
    const now = new Date().getHours()

    /* 
    =================> ะัะปะธ ัะตะปะตัะพะฝ ะดะพะผะฐ 
    */
    if (result) {

        /* ะั 20:00 ะดะพ 22:00 ะธ ะตัะปะธ ัะฒะตั ะฒัะบะปััะตะฝ */
        if (now >= 19 && now <= 22 && ambientLight.status === false) {
            // ะฒะบะปััะธัั ัะฒะตั

            console.log('[scheduler.js] Ambient lights turn on! (20:00 - 22:00) [phone at home + lights was off])');
            ambientLight.toggle();

        }

    }

    /* 
    =================> ะัะปะธ ัะตะปะตัะพะฝ ะฝะต ะดะพะผะฐ 
    */
    else {
        // TODO
        // ะะฐะดะพ ะฝะฐะฟะธัะฐัั ะฟัะพะฒะตัะบั ะฝะฐ ะดะปะธัะตะปัะฝะพััั ะผะพะปัะฐะฝะธั ััััะพะนััะฒะฐ
    }

    /* 
    =================> ะ ะปัะฑะพะผ ัะปััะฐะต 
    */

    /* ะั 01:00 ะดะพ 05:00 ะตัะปะธ AMBIENT ัะฒะตั ะฒะบะปััะตะฝ */
    if (now >= 1 && now <= 5 && ambientLight.status === true) {

        // ะฒัะบะปััะธัั ัะฒะตั
        console.log('[scheduler.js] Ambient lights turn off! (01:00 - 05:00) [light was on])');
        ambientLight.toggle();

    }

    /* ะั 01:00 ะดะพ 05:00 ะตัะปะธ CLIPLIGHT ัะฒะตั ะฒะบะปััะตะฝ */
    if (now >= 1 && now <= 5 && clipLight.status === true) {

        // ะฒัะบะปััะธัั ัะฒะตั
        console.log('[scheduler.js] Ambient lights turn off! (01:00 - 05:00) [light was on]');
        clipLight.toggle();
    }

});

//
//#region REMINDERS

// function workdayEnd() {

//     function getRandomInt(max) {
//         return Math.floor(Math.random() * Math.floor(max));
//     }

//     switch (getRandomInt(4)) {
//         case 0:
//             bot.sendMessage(ADMIN_ID, `๐ธ ะะฐัะฐะฑะพัะฐะปัั?! ๐จโ๐ป\nะ ัะตะฟะตัั ะดะพะผะพะน!`);
//             break;
//         case 1:
//             bot.sendMessage(ADMIN_ID, `๐ธ ะะตะณะธ ะพัััะดะฐ! ๐\nะะตะณะธ ะคะพัะตัั, ะฑะตะณะธ!`);
//             break;
//         case 2:
//             bot.sendMessage(ADMIN_ID, `๐ธ ะฅะฐัะพั ัะธะดะตัั! ๐ช\nะะฐะปะธ ะถะธัั ะดะปั ัะตะฑั!`);
//             break;
//         case 3:
//             bot.sendMessage(ADMIN_ID, `๐ธ ะะพะฝะตั ัะฐะฑะพัะตะณะพ ะดะฝั! ๐\nะะพัะฐ ะพัะดััะฐัั!`);
//             break;
//         default: break;
//     }

// }

// schedule.scheduleJob({ dayOfWeek: [new schedule.Range(1, 5)], hour: 17, minute: 58, second: 55 }, workdayEnd);


// const getAllUsers = require('./firestore').getAllUsers;
// async function newYearGratters() {
//     const users = await getAllUsers();

//     console.log(users);

//     users.forEach((user) => {
//         bot.sendMessage(user.id, `๐ธ ๐พ๐ฅ๐๐\n\n*ะะพะธ ะดะพัะพะณะธะต ะดััะทัั!*\nะัะบัะตะฝะฝะต ะฟะพะทะดัะฐะฒะปัั ะฒะฐั ั ะฝะฐัััะฟะฐััะธะผะธ ะฟัะฐะทะดะฝะธะบะฐะผะธ. ะะธะบะพะณะดะฐ ะฝะต ะผะตะฝัะนัะตัั, ะพััะฐะฒะฐะนัะตัั ะฒัะตะณะดะฐ ัะฐะบะธะผะธ ะถะต! ะญัะพ ะฟะพะถะตะปะฐะฝะธะต - ะพั ะฒัะตะน ะดััะธ, ะฝะต ะบะฐะบ ััะธ ะดััะฐัะบะธะต ะธ ะฑะตะทะปะธะบะธะต ะฟะพะทะดัะฐะฒะปะตะฝะธั, ะบะพัะพััะต ะฝะฐัะพะด ะฟะตัะตััะปะฐะตั ะดััะณ ะดััะณั, ะดะฐะถะต ะฝะต ัะธัะฐั. ะั - ัะฐะผะฐั ะปัััะฐั ะบะพะผะฐะฝะดะฐ ะฟะพ ะฒะพะดะฝะพะผั ะฟะพะปะพ, ั ะบะพัะพัะพะน ะผะฝะต ะฟัะธัะพะดะธะปะพัั ะธะณัะฐัั! ะก ะฝะพะฒัะผ 2013 ะณะพะดะพะผ!`, { parse_mode: "Markdown" });
//     });

//     logger.log("โ [scheduler] >> โ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธ ะัะฟัะฐะฒะปะตะฝั ะฝะพะฒะพะณะพะดะฝะธะต ะฟะพะทะดัะฐะฒะปะตะฝะธั โ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธ");
// }

// const newYear = new Date(2020, 11, 31, 22, 58, 55);
// schedule.scheduleJob(newYear, newYearGratters);

//#endregion
//