const puppeteer = require('puppeteer');
const logger = require('../logger');
const firestore = require('../firestore');

module.exports = class Mts {
    static minUpdateInterval = 600000;
    static minBalance = 1.5;

    //Data
    static async __scrapeBalance(browser, account) {
        try {
            const page = await browser.newPage();
            await page.goto('https://ihelper.mts.by/SelfCarePda/Security.mvc/LogOn', { waitUntil: 'domcontentloaded' });
            await page.waitFor(2000);
            await page.evaluate(account => {
                document.getElementsByName("username")[0].value = account.login;
                document.getElementsByName("password")[0].value = account.password;
            }, account);
            await page.waitFor(2000);
            // page.screenshot({ path: 'example1.2.png' }),
            await page.evaluate(() => {
                document.querySelector("form").submit();
            });
            await page.waitFor(2000);
            // await page.screenshot({ path: 'example1.3.png' })
            await page.goto('https://ihelper.mts.by/SelfCarePda/Account.mvc/Status', { waitUntil: 'domcontentloaded' });
            // await page.screenshot({ path: 'example2.png' });
            const text = await page.evaluate(() => document.querySelector(".main").innerText);
            await page.close();
            return text;
        } catch (error) {
            logger.error(`ERROR (mts.js)\n\n${error}`);
        }
    }
    static __parseData(text) {
        const regExBalance = /–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: (\d+\,*\d*) —Ä—É–±/m;
        const regExTraffic = /: (\d+\,*\d*)\s*(–ú–±|Mb)/mi;
        const regExMinutes = /: (\d+\,*\d*)\s*(–ú–∏–Ω|Min)/mi;
        const regExSpent = /–∑–∞ –ø–µ—Ä–∏–æ–¥ (.*$)/m;

        const balance = text.match(regExBalance) ? text.match(regExBalance)[1] : '(–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)';
        const traffic = text.match(regExTraffic) ? text.match(regExTraffic)[1] : '(–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)';
        const minutes = text.match(regExMinutes) ? text.match(regExMinutes)[1] : '(–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)';
        const spent = text.match(regExSpent) ? text.match(regExSpent)[1] : '(–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)';

        return { balance, traffic, minutes, spent }
    }
    static async updateAccounts(array) {
        let browser;
        // { headless: false }
        if (process.platform === "linux")
            browser = await puppeteer.launch({ executablePath: '/usr/bin/chromium-browser' });
        else
            browser = await puppeteer.launch();

        for await (let account of array) {
            //–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [this.minUpdateInterval] –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è
            if (!account.timestamp || +new Date() - account.timestamp > this.minUpdateInterval) {

                logger.log(`[mts] >> scrapeBalance() –¥–ª—è [${account.login}]`);

                await this.__scrapeBalance(browser, account)
                    .then(text => {
                        let data = this.__parseData(text);
                        data.timestamp = + new Date();
                        account = Object.assign(account, data);
                    })
                    .catch(e => {
                        logger.error(`[mts] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ${account.login}\n${e}`);
                        logger.log(`[mts] –î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!`);
                    })
                    .finally(() => logger.log(`[mts] ‚ñ∂Ô∏è  –ë–∞–ª–∞–Ω—Å: ${account.balance}`));

            } else {
                logger.log(`‚ùó‚ùó [mts] >> –ê–∫–∫–∞—É–Ω—Ç [${account.login}] —É–∂–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è ${this.minUpdateInterval / 60000} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
            }
        }

        await browser.close();
        return array;
    }
    static async updateAllAccounts() {
        const allMtsAccounts = await firestore.getAllMtsAccounts();
        await this.updateAccounts(allMtsAccounts);
        firestore.setAllMtsAccounts(allMtsAccounts);
    }

    //Messages
    static __makeMessage(id, account, addRefreshButton = false) {
        const date = new Date(parseInt(account.timestamp)).toLocaleDateString();
        const time = new Date(parseInt(account.timestamp)).toLocaleTimeString();
        const warning = parseFloat(account.balance) <= this.minBalance;
        const warningText = warning ? `‚ùóÔ∏è*–ü–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å*‚ùóÔ∏è\n\n` : ``;
        const text = `${warningText}*–ë–∞–ª–∞–Ω—Å MTS*\n\`–î–ª—è –Ω–æ–º–µ—Ä–∞: ${account.login}\n–ü–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞: ${date} ${time}\n
–ë–∞–ª–∞–Ω—Å: ${account.balance} —Ä—É–±.
–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: ${account.traffic} –º–±.
–ú–∏–Ω—É—Ç—ã: ${account.minutes} –º–∏–Ω.
–ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ ${account.spent}\``;
        const options = addRefreshButton ? {
            parse_mode: "Markdown",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        {
                            text: "–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
                            callback_data: JSON.stringify({
                                query_id: "mts"
                            })
                        }
                    ]
                ]
            })
        } : { parse_mode: "Markdown" };
        return { id, text, options, warning }
    }
    static async getAllWarningMessagesFirestore() {
        let messages = [];
        const userAccounts = await firestore.getAllMtsAccounts();
        userAccounts.forEach(account =>
            account.users.forEach(user =>
                messages.push(this.__makeMessage(user, account/*, true*/))));
        return messages.filter(message => message.warning);
    }
    static async getMessagesFirestoreByUserId(id) {
        let messages = [];
        const userAccounts = await firestore.getMtsAccountsByUserId(id);

        // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
        if (userAccounts.length) {
            userAccounts.forEach(account => messages.push(this.__makeMessage(id, account, true)));
        }
        // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        else {
            messages.push({
                id,
                text: `üê∏ –Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∫–∞–±–∏–Ω–µ—Ç–∞ Mts`,
                options: { parse_mode: "Markdown" }
            });
        }
        return messages;
    }
    static async getMessagesMtsByUserId(id) {
        let messages = [];
        const userAccounts = await firestore.getMtsAccountsByUserId(id);
        await this.updateAccounts(userAccounts);
        firestore.setAllMtsAccounts(userAccounts);
        userAccounts.forEach(account => messages.push(this.__makeMessage(id, account, false)));
        return messages;
    }
}